{"version":3,"sources":["serviceWorker.js","commons/components/MainContainer.jsx","commons/components/SideBar.jsx","commons/hocs/MainLayout.jsx","modules/blogs/actions.js","modules/blogs/models.js","pages/Homepage.jsx","pages/AboutPage.jsx","commons/hocs/router.jsx","commons/hocs/MainPage.jsx","commons/hocs/Root.jsx","modules/blogs/reducers.js","commons/utils/fetch.js","commons/saga.js","modules/index.js","index.jsx"],"names":["Boolean","window","location","hostname","match","MainContainer","styled","div","props","margin","width","padding","SideBar","openMenu","className","defaultSelectedKeys","theme","Item","src","alt","key","HomeOutlined","SnippetsOutlined","NotificationOutlined","style","float","UserOutlined","MessageOutlined","SettingOutlined","defaultPropTypes","Header","Content","MainLayout","children","history","useHistory","useLocation","useState","setOpenMenu","defaultKeyMenu","setDefaultKeyMenu","useEffect","pathname","display","alignItems","marginRight","minWidth","mode","lineHeight","fontWeight","onSelect","link","push","overlay","height","maxWidth","onClick","MenuOutlined","backgroundColor","defaultProps","loadBlog","createAction","Homepage","blogs","useSelector","state","dispatch","useDispatch","lg","map","blog","title","AboutPage","Router","role","exact","path","component","MainPage","Root","store","reducer","createSlice","name","initialState","error","reducers","REDUCER_LOAD_BLOG_SUCCESS","action","payload","REDUCER_LOAD_BLOG_FAIL","actions","fetchLoading","a","url","method","data","Axios","rootSaga","call","result","status","put","takeEvery","actionsSaga","sagaMiddleware","createSagaMiddleware","configureStore","todoReducer","middleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b01de7e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\";\r\n\r\nconst MainContainer = styled.div(props => {\r\n  return {\r\n    margin: \"20px auto 0px auto\",\r\n    width: props.width ? props.width : \"75%\",\r\n    padding: \"30px\"\r\n    // backgroundColor: \"#ffffff\",\r\n    // boxShadow: \"0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)\"\r\n  };\r\n});\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport {\r\n  HomeOutlined,\r\n  NotificationOutlined,\r\n  SettingOutlined,\r\n  SnippetsOutlined,\r\n  UserOutlined,\r\n  MessageOutlined\r\n} from \"@ant-design/icons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function SideBar({ openMenu }) {\r\n  return (\r\n    <nav className={`navbar ${openMenu ? \"active\" : \"\"}`}>\r\n      <Menu defaultSelectedKeys={[\"/\"]} theme=\"dark\" className=\"navbar-nav\">\r\n        <Menu.Item className=\"nav-item\">\r\n          <img\r\n            src=\"https://codelearnstorage.s3.amazonaws.com/Themes/TheCodeCampPro/Resources-cdn/Images/code-learn/logo-codelearn.svg\"\r\n            alt=\"\"\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/\" className=\"nav-item\">\r\n          <HomeOutlined />\r\n          <span className=\"nav-text\">Trang chủ</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/blog\" className=\"nav-item\">\r\n          <SnippetsOutlined />\r\n          <span className=\"nav-text\">Blogs</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/news\" className=\"nav-item\">\r\n          <NotificationOutlined />\r\n          <span className=\"nav-text\">News</span>\r\n        </Menu.Item>\r\n        <Menu.Item style={{ float: \"right\" }} className=\"nav-item\">\r\n          <UserOutlined />\r\n          <span className=\"nav-text\">Tài khoản</span>\r\n        </Menu.Item>\r\n        <Menu.Item className=\"nav-item\">\r\n          <MessageOutlined />\r\n          <span className=\"nav-text\">Ngôn ngữ</span>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/setting\" className=\"nav-item\">\r\n          <SettingOutlined />\r\n          <span className=\"nav-text\">Cài đặt</span>\r\n        </Menu.Item>\r\n      </Menu>\r\n    </nav>\r\n  );\r\n}\r\n\r\nSideBar.propTypes = {\r\n  openMenu: PropTypes.bool.isRequired\r\n};\r\n\r\nSideBar.defaultPropTypes = {\r\n  openMenu: false\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Layout, Menu, Dropdown } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { MenuOutlined, UserOutlined } from \"@ant-design/icons\";\r\nimport MainContainer from \"../components/MainContainer\";\r\nimport SideBar from \"../components/SideBar\";\r\n\r\nconst breakpoint = 760;\r\nconst { Header, Content } = Layout;\r\n\r\nfunction MainLayout({ children }) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n  const [defaultKeyMenu, setDefaultKeyMenu] = useState(\"/\");\r\n\r\n  const handleSelectMenu = link => {\r\n    history.push(link.key);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDefaultKeyMenu(location.pathname);\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <Layout className=\"layout\">\r\n      <Header\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <div className=\"logo\">\r\n          <img\r\n            src=\"https://codelearnstorage.s3.amazonaws.com/Themes/TheCodeCampPro/Resources-cdn/Images/code-learn/logo-codelearn.svg\"\r\n            alt=\"\"\r\n            style={{ marginRight: 20 }}\r\n          />\r\n        </div>\r\n        <MediaQuery minWidth={breakpoint}>\r\n          <Menu\r\n            theme=\"dark\"\r\n            mode=\"horizontal\"\r\n            defaultSelectedKeys={[defaultKeyMenu]}\r\n            style={{ lineHeight: \"64px\", fontWeight: \"700\", width: \"100%\" }}\r\n            onSelect={handleSelectMenu}\r\n          >\r\n            <Menu.Item key=\"/\">Trang chủ</Menu.Item>\r\n            <Menu.Item key=\"/blogs\">Blogs</Menu.Item>\r\n            <Menu.Item key=\"/news\">Tin tức</Menu.Item>\r\n            <Menu.Item style={{ float: \"right\" }} key=\"/login\">\r\n              Đăng nhập\r\n            </Menu.Item>\r\n            <Menu.Item style={{ float: \"right\" }}>\r\n              <UserOutlined />\r\n            </Menu.Item>\r\n            <Menu.Item style={{ float: \"right\" }}>\r\n              <Dropdown\r\n                overlay={() => {\r\n                  return (\r\n                    <Menu>\r\n                      <Menu.Item>\r\n                        <img\r\n                          src=\"https://codelearnstorage.s3.amazonaws.com/Themes/TheCodeCampPro/Resources-cdn/Images/vn.png\"\r\n                          alt=\"\"\r\n                          style={{ width: 20, height: 20, marginRight: 5 }}\r\n                        />\r\n                        VietNam\r\n                      </Menu.Item>\r\n                      <Menu.Item>\r\n                        {\" \"}\r\n                        <img\r\n                          src=\"https://codelearnstorage.s3.amazonaws.com/Themes/TheCodeCampPro/Resources-cdn/Images/en.png\"\r\n                          alt=\"\"\r\n                          style={{ width: 20, height: 20, marginRight: 5 }}\r\n                        />\r\n                        English\r\n                      </Menu.Item>\r\n                    </Menu>\r\n                  );\r\n                }}\r\n              >\r\n                <img\r\n                  src=\"https://codelearnstorage.s3.amazonaws.com/Themes/TheCodeCampPro/Resources-cdn/Images/vn.png\"\r\n                  alt=\"\"\r\n                  style={{ width: 30, height: 30 }}\r\n                />\r\n              </Dropdown>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </MediaQuery>\r\n        <MediaQuery maxWidth={breakpoint}>\r\n          <SideBar openMenu={openMenu} />\r\n          <Menu\r\n            theme=\"dark\"\r\n            mode=\"horizontal\"\r\n            defaultSelectedKeys={[defaultKeyMenu]}\r\n            style={{ lineHeight: \"64px\", fontWeight: \"700\", width: \"100%\" }}\r\n          >\r\n            <Menu.Item\r\n              onClick={() => (openMenu ? setOpenMenu(false) : setOpenMenu(true))}\r\n              style={{ float: \"right\" }}\r\n            >\r\n              <MenuOutlined />\r\n            </Menu.Item>\r\n          </Menu>\r\n        </MediaQuery>\r\n      </Header>\r\n      <Content style={{ backgroundColor: \"#fff\" }}>\r\n        <div className=\"site-layout-content\">\r\n          <MainContainer>{children}</MainContainer>\r\n        </div>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nMainLayout.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nMainLayout.defaultProps = {\r\n  children: null\r\n};\r\n\r\nexport default MainLayout;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { MODULE_NAME } from \"./models\";\r\n\r\nexport const loadBlog = createAction(`${MODULE_NAME}_SAGA_LOAD_BLOG`);\r\n\r\nexport default null;\r\n","export const MODULE_NAME = \"BLOG\";\r\n\r\nexport default null;\r\n","import React, { useEffect } from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { MODULE_NAME as MODULE_TODO } from \"../modules/blogs/models\";\r\nimport { loadBlog } from \"../modules/blogs/actions\";\r\n\r\nexport default function Homepage() {\r\n  const blogs = useSelector(state => state[MODULE_TODO].blogs);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadBlog());\r\n  }, [dispatch]);\r\n\r\n  const renderBlogs = () => {\r\n    return blogs.map(blog => {\r\n      return blog.title;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col lg={7}>1</Col>\r\n      <Col lg={10}>{blogs ? renderBlogs() : null}</Col>\r\n      <Col lg={7}>1</Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function AboutPage() {\r\n  return <div>About</div>;\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport MainLayout from \"./MainLayout\";\r\nimport Homepage from \"../../pages/Homepage\";\r\nimport AboutPage from \"../../pages/AboutPage\";\r\n\r\nexport default function Router() {\r\n  const user = { role: \"admin\" };\r\n  if (user) {\r\n    return (\r\n      <MainLayout>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Homepage} />\r\n          <Route exact path=\"/about\" component={AboutPage} />\r\n        </Switch>\r\n      </MainLayout>\r\n    );\r\n  }\r\n  return (\r\n    <MainLayout>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Homepage} />\r\n      </Switch>\r\n    </MainLayout>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport Router from \"./router\";\r\n\r\nfunction MainPage() {\r\n  return (\r\n    <>\r\n      <HashRouter>\r\n        <Router />\r\n      </HashRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nfunction Root({ store }) {\r\n  return (\r\n    <Provider store={store}>\r\n      <MainPage />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nRoot.propTypes = {\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  store: PropTypes.object.isRequired\r\n};\r\n\r\nRoot.defaultPropTypes = {\r\n  store: {}\r\n};\r\n\r\nexport default Root;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { MODULE_NAME } from \"./models\";\r\n\r\nconst reducer = createSlice({\r\n  name: MODULE_NAME,\r\n  initialState: {\r\n    blogs: [],\r\n    error: null\r\n  },\r\n  reducers: {\r\n    REDUCER_LOAD_BLOG_SUCCESS: (state, action) => ({\r\n      blogs: action.payload\r\n    }),\r\n    REDUCER_LOAD_BLOG_FAIL: (state, action) => ({\r\n      error: action.payload\r\n    })\r\n  }\r\n});\r\n\r\nexport const { REDUCER_LOAD_BLOG_SUCCESS, REDUCER_LOAD_BLOG_FAIL } = reducer.actions;\r\n\r\nexport default reducer;\r\n","import Axios from \"axios\";\r\n\r\nexport const fetchLoading = async ({ url, method, data }) => {\r\n  return Axios({\r\n    url,\r\n    method,\r\n    data\r\n  });\r\n};\r\n\r\nexport const url = \"https://5ce2c23be3ced20014d35e3d.mockapi.io/api/todos\";\r\n\r\nexport default null;\r\n","import { takeEvery, call, put } from \"redux-saga/effects\";\r\nimport * as actions from \"../modules/blogs/reducers\";\r\nimport * as actionsSaga from \"../modules/blogs/actions\";\r\nimport { url, fetchLoading } from \"./utils/fetch\";\r\n\r\nfunction* loadBlog() {\r\n  try {\r\n    const result = yield call(fetchLoading, { url, method: \"GET\", data: null });\r\n    if (result && result.status === 200) yield put(actions.REDUCER_LOAD_BLOG_SUCCESS(result.data));\r\n  } catch (error) {\r\n    yield put(actions.REDUCER_LOAD_BLOG_FAIL(error));\r\n  }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield takeEvery(actionsSaga.loadBlog, loadBlog);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport todoReducer from \"./blogs/reducers\";\r\nimport { MODULE_NAME as MODULE_BLOGS } from \"./blogs/models\";\r\nimport rootSaga from \"../commons/saga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nexport default configureStore({\r\n  reducer: { [MODULE_BLOGS]: todoReducer.reducer },\r\n  middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./commons/assets/css/custom-ant.css\";\r\nimport \"./commons/assets/css/sidebar.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Root from \"./commons/hocs/Root\";\r\nimport store from \"./modules/index\";\r\n\r\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}